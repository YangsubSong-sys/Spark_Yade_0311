// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "comitoggleswitch.h"

// Dispatch interfaces referenced by this interface
#include "font.h"

/////////////////////////////////////////////////////////////////////////////
// CComiToggleSwitch

IMPLEMENT_DYNCREATE(CComiToggleSwitch, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CComiToggleSwitch properties

unsigned long CComiToggleSwitch::GetBackColor()
{
	unsigned long result;
	GetProperty(0x1, VT_I4, (void*)&result);
	return result;
}

void CComiToggleSwitch::SetBackColor(unsigned long propVal)
{
	SetProperty(0x1, VT_I4, propVal);
}

CString CComiToggleSwitch::GetOnText()
{
	CString result;
	GetProperty(0x2, VT_BSTR, (void*)&result);
	return result;
}

void CComiToggleSwitch::SetOnText(LPCTSTR propVal)
{
	SetProperty(0x2, VT_BSTR, propVal);
}

CString CComiToggleSwitch::GetOffText()
{
	CString result;
	GetProperty(0x3, VT_BSTR, (void*)&result);
	return result;
}

void CComiToggleSwitch::SetOffText(LPCTSTR propVal)
{
	SetProperty(0x3, VT_BSTR, propVal);
}

BOOL CComiToggleSwitch::GetTextVisible()
{
	BOOL result;
	GetProperty(0x4, VT_BOOL, (void*)&result);
	return result;
}

void CComiToggleSwitch::SetTextVisible(BOOL propVal)
{
	SetProperty(0x4, VT_BOOL, propVal);
}

BOOL CComiToggleSwitch::GetState()
{
	BOOL result;
	GetProperty(0x5, VT_BOOL, (void*)&result);
	return result;
}

void CComiToggleSwitch::SetState(BOOL propVal)
{
	SetProperty(0x5, VT_BOOL, propVal);
}

unsigned long CComiToggleSwitch::GetOnColor()
{
	unsigned long result;
	GetProperty(0x6, VT_I4, (void*)&result);
	return result;
}

void CComiToggleSwitch::SetOnColor(unsigned long propVal)
{
	SetProperty(0x6, VT_I4, propVal);
}

unsigned long CComiToggleSwitch::GetOffColor()
{
	unsigned long result;
	GetProperty(0x7, VT_I4, (void*)&result);
	return result;
}

void CComiToggleSwitch::SetOffColor(unsigned long propVal)
{
	SetProperty(0x7, VT_I4, propVal);
}

COleFont CComiToggleSwitch::GetTextFont()
{
	LPDISPATCH pDispatch;
	GetProperty(0x8, VT_DISPATCH, (void*)&pDispatch);
	return COleFont(pDispatch);
}

void CComiToggleSwitch::SetTextFont(LPDISPATCH propVal)
{
	SetProperty(0x8, VT_DISPATCH, propVal);
}

unsigned long CComiToggleSwitch::GetTextOnColor()
{
	unsigned long result;
	GetProperty(0x9, VT_I4, (void*)&result);
	return result;
}

void CComiToggleSwitch::SetTextOnColor(unsigned long propVal)
{
	SetProperty(0x9, VT_I4, propVal);
}

unsigned long CComiToggleSwitch::GetTextOffColor()
{
	unsigned long result;
	GetProperty(0xa, VT_I4, (void*)&result);
	return result;
}

void CComiToggleSwitch::SetTextOffColor(unsigned long propVal)
{
	SetProperty(0xa, VT_I4, propVal);
}

short CComiToggleSwitch::GetSwitchStyle()
{
	short result;
	GetProperty(0xb, VT_I2, (void*)&result);
	return result;
}

void CComiToggleSwitch::SetSwitchStyle(short propVal)
{
	SetProperty(0xb, VT_I2, propVal);
}

short CComiToggleSwitch::GetOrientation()
{
	short result;
	GetProperty(0xc, VT_I2, (void*)&result);
	return result;
}

void CComiToggleSwitch::SetOrientation(short propVal)
{
	SetProperty(0xc, VT_I2, propVal);
}

BOOL CComiToggleSwitch::GetCommandButton()
{
	BOOL result;
	GetProperty(0xd, VT_BOOL, (void*)&result);
	return result;
}

void CComiToggleSwitch::SetCommandButton(BOOL propVal)
{
	SetProperty(0xd, VT_BOOL, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CComiToggleSwitch operations

void CComiToggleSwitch::EnableCtrl(short bEnable)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0xe, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 bEnable);
}

short CComiToggleSwitch::GetEnable()
{
	short result;
	InvokeHelper(0xf, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

void CComiToggleSwitch::PassKey(long nPassKey)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x10, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nPassKey);
}

void CComiToggleSwitch::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
